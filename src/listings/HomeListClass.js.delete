import React, { Component } from "react";
import { Storage } from "aws-amplify";
import { Auth } from "aws-amplify";

// nodejs library that concatenates classes
import classNames from "classnames";
// @material-ui/core components
import { makeStyles } from "@material-ui/core/styles";
import { DataStore } from "aws-amplify";
import { SellerRealEstateProfile } from "../models";

// @material-ui/icons
import HomeOutlinedIcon from "@material-ui/icons/HomeOutlined";

// core components
import Header from "../common/components/Header.js";
import HeaderLinks from "../common/components/HeaderLinks.js";
import Parallax from "../common/components/Parallax.js";
import Table from "../common/components/Table.js";
import Card from "../common/components/Card.js";
import CardBody from "../common/components/CardBody.js";

import listingStyle from "./listingStyle.js";

const useStyles = makeStyles(listingStyle);

class HomeList extends Component {
  constructor(props) {
    super(props);
    this.homeListRef = React.createRef();
    this.classes = useStyles();
    this.reProfiles = new Array();
    this.thumbNails = new Array();
    this.homeRows = new Array();
    this.currentUSer = {};
  }

  async componentDidMount() {
    try {
      var reProfiles = await DataStore.query(SellerRealEstateProfile, (p) =>
        p.or((p) =>
          p
            .status("eq", "DOCS_UPLOADED")
            .status("eq", "DOCS_IN_REVIEW")
            .status("eq", "DOCS_REVIEWED")
        )
      );
      var tableData = [];
      var thumbNailArray = [];
      reProfiles.forEach((element, index) => {
        thumbNailArray.push(
          <HomeOutlinedIcon
            fontSize="inherit"
            color="inherit"
            className={this.classes.thumbNail}
          />
        );
        tableData.push(this.homeListRow(index, element));
      });

      this.getHomeImages(reProfiles);
      this.setState({ thumbNails: thumbNailArray, homeRows: tableData });
    } catch (e) {
      console.log(e);
    }
  }

  onLogout = async () => {
    console.log("in log out - clearing localstorage");
    localStorage.clear();
    await Auth.signOut();
    this.checkLoginState();
  };

  checkLoginState = async () => {
    try {
      const currentUser = await Auth.currentAuthenticatedUser();
      if (currentUser) {
        this.currentUser = currentUser;
      }
    } catch (e) {
      this.currentUser = null;
    }
  };

  homeListRow(index, item) {
    return [
      <div className={this.classes.imgContainer} key={1}>
        {this.thumbNails[index]}
      </div>,
      <span key={1}>
        <a href="#home" className={this.classes.tdNameAnchor}>
          {item.houseType}
        </a>
        <br />
        <small className={this.classes.tdNameSmall}>
          {item.bedrooms} beds, {item.bathrooms} baths
          <br />
          {item.address.formattedAddress}
        </small>
      </span>,
      <span key={1}>
        <small className={this.classes.tdNumberSmall}></small>
      </span>,
      "",
      "",
    ];
  }

  async getHomeImages(reProfiles) {
    //get the first home image to use as a thumbnail and then skip the rest
    //do this for all seller profiles which have attachments
    var tmpThumbs = this.thumbNails.slice();
    reProfiles.forEach((element, index) => {
      if (element.attachments && element.attachments.length > 0) {
        element.attachments.some((attch) => {
          //console.log("attch.category: ", attch.category);
          if (attch.category == "home_photo") {
            //console.log(attch.fileKey);
            Storage.get("resized_" + attch.fileKey, {
              level: "protected",
              identityId: element.sellerReference,
            })
              .then((result) => {
                //console.log("Current index: ", index, result);
                var imgNode = React.createElement("img", {
                  src: result,
                  width: "200",
                });
                tmpThumbs[index] = imgNode;
              })
              .catch((err) => console.log(err));

            return true; //exit the some loop after finding first home photo
          }
        });
      }
    });
    this.setState({ thumbNails: tmpThumbs });
  }

  render() {
    return (
      <div>
        <Header
          color="white"
          brand="Sell To Rent Back"
          rightLinks={<HeaderLinks onLogout={this.onLogout} />}
          fixed
          changeColorOnScroll={{
            height: 400,
            color: "dark",
          }}
        />
        <Parallax smallheader />
        <div className={classNames(this.classes.main, this.classes.mainRaised)}>
          <div className={this.classes.container}>
            <Card plain>
              <CardBody plain>
                <h3 className={this.classes.cardTitle}>Home Listings</h3>
                <Table
                  tableHead={["", "Details", "", "", "", ""]}
                  tableData={this.homeRows}
                  tableShopping
                  customHeadCellClasses={[
                    this.classes.textCenter,
                    this.classes.description,
                    this.classes.description,
                    this.classes.textRight,
                    this.classes.textRight,
                    this.classes.textRight,
                  ]}
                  customHeadClassesForCells={[0, 2, 3, 4, 5, 6]}
                  customCellClasses={[
                    this.classes.tdName,
                    this.classes.customFont,
                    this.classes.customFont,
                    this.classes.tdNumber,
                    this.classes.tdNumber +
                      " " +
                      this.classes.tdNumberAndButtonGroup,
                    this.classes.tdNumber + " " + this.classes.textCenter,
                  ]}
                  customClassesForCells={[1, 2, 3, 4, 5, 6]}
                />
              </CardBody>
            </Card>
          </div>
        </div>
      </div>
    );
  }
}

export default HomeList;
